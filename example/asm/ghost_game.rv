.section .data
msg_quest:     .ascii 'In front of you are 3 doors. Which one do you open? (1, 2 or 3) ',0
msg_ok:        .ascii 'You move on.',10,0
msg_game_over: .ascii 'A ghost! Run!',10,0
msg_score:     .ascii 'Game Over. Your Score: %d. Enter "r" to restart or anything else to exit.',0

.section .bss
stack_top:
.skip 0x1000
stack_bottom:

.section .text
.globl _start
_start:
    ; setup stack
    la   sp,stack_bottom

    ; set score to 0
    addi s0,zero,0

.1:
    ; print quest
    la   a0,msg_quest
    call printf
.2:
    addi s1,zero,0

    ; read one char from standard input
    call getc
    addi s1,a0,-0x30

    ; while input is not 1, 2 or 3
    addi t0,zero,1
    blt  s1,t0,.2
    addi t0,zero,4
    bge  s1,t0,.2

    ; get random in [1;3]
    addi a0,zero,1
    addi a1,zero,3
    call random
    mv   s2,a0

    ; if input == random
    bne s1,s2,.4
    ; then print game over
    la   a0,msg_game_over
    call puts
    j    .5
.4:
    ; else print ok and increment score
    la   a0,msg_ok
    call puts
    addi s0,s0,1
    j    .1
.5:
    ; print score
    la   a0,msg_score
    addi sp,sp,4
    sw   s0,0(sp)
    call printf
    addi sp,sp,-4

.6:
    call getc
    addi t0,zero,10
    beq  a0,t0,.6
    addi t0,zero,'r'
    beq  a0,t0,_start

    ; exit(0)
    addi a0,zero,0
    call exit

;
; void puts(char[] str)
;
puts:
    addi a7,zero,1
    ecall
    ret

;
; void printf(char[] fmt, ...)
;
printf:
    mv   a1,sp
    addi a7,zero,2
    ecall
    ret

;
; int getc()
;
getc:
    addi a7,zero,3
    ecall
    ret

;
; void exit(int status)
;
exit:
    addi a7,zero,127
    ecall

;
; int random(int min, int max)
;
random:
    addi a7,zero,120
    ecall
    ret
